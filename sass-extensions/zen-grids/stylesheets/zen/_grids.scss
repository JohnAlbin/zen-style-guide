//
// Mixins for the Zen Grids system.
//


// Specify the number of columns in the grid.
$zen-column-count: 12 !default;

// Specify the width of the gutters; half of the gutter will be placed on each
// side of a grid column.
$zen-gutter-width: 20px !default;

// Specify the width of the entire grid. Defaults to 100% for a fluid responsive
// design, but you can change this to a pixel value if you need a fixed grid.
$zen-grid-width: 100% !default;

// Specify the default floating direction for zen's mixins.
$zen-float-direction: left !default;

// Specify the CSS3 box-sizing method. The default, "border-box", is compatible
// with all modern browsers, including IE 8 and later. Use "content-box" for
// wider compatibility (Note: you'll also need to set $legacy-support-for-ie7
// and $legacy-support-for-ie6 to true.)
$zen-box-sizing: border-box !default;

// This is a helper variable for RTL layouts.
$zen-reverse-all-floats: false !default;

// You can generate more efficient CSS if you manually apply the
// zen-grid-item-base mixin to all grid items from within a single ruleset.
$zen-auto-include-item-base: true !default;
$zen-auto-include-html-item-base: true !default;

// Turn off IE6/7 support since we're defaulting to box-sizing: border-box.
$legacy-support-for-ie7: false !default;
$legacy-support-for-ie6: false !default;


//
// Zen Grids requires the clearfix mixin.
//
@import "compass/utilities/general/clearfix";


//
// Apply this to the grid container element.
//
@mixin zen-grid-container () {
  position: relative;
  @include clearfix;
}

//
// Apply this to any grid item that is also a grid container element for a
// nested grid.
//
@mixin zen-nested-container () {
  @include zen-grid-container;
  padding: {
    left: 0;
    right: 0;
  }
}

//
// Apply this to each grid item. Set the $column-position to the column number
// the grid item starts on. And set the $column-span to the number of columns
// that the grid item spans.
//
// For grid items that are floated right, the $column-position is counted
// from the right instead of from the left.
//
@mixin zen-grid-item (
  $column-position,
  $column-span,
  $float-direction: $zen-float-direction,
  $column-count: $zen-column-count,
  $gutter-width: $zen-gutter-width,
  $grid-width: $zen-grid-width,
  $box-sizing: $zen-box-sizing,
  $reverse-all-floats: $zen-reverse-all-floats,
  $auto-include-item-base: $zen-auto-include-item-base
) {

  // Calculate the unit width.
  $unit-width: $grid-width / $column-count;

  // Determine the float direction and its reverse.
  $dir: $float-direction;
  @if $reverse-all-floats {
    $dir: zen-direction-flip($dir);
  }
  $rev: zen-direction-flip($dir);

  float: $dir;
  width: $column-span * $unit-width;
  margin: {
    #{$dir}: ($column-position - 1) * $unit-width;
    #{$rev}: (1 - $column-position - $column-span) * $unit-width;
  }

  // Auto-apply the unit base mixin.
  @if $auto-include-item-base {
    @include zen-grid-item-base($gutter-width, $box-sizing);
  }
}

//
// Apply this mixin to each content box in the layout to prevent overflowing
// content from breaking the layout.
//
// The mixin has the following optional parameters, but its better to use the
// $zen-gutter-width and $zen-box-sizing variables instead:
// - $gutter-width: Half of this value is applied as padding to the left and
//   right sides of the item.
// - $box-sizing: The type of CSS3 box model each box should use. Can be set to
//   content-box or border-box. Defaults to content-box, but border-box is way
//   cooler. IE 6 and 7 don't support border-box.
@mixin zen-grid-item-base (
  $gutter-width: $zen-gutter-width,
  $box-sizing: $zen-box-sizing
) {
  padding: {
    left: zen-half-gutter($gutter-width);
    right: zen-half-gutter($gutter-width);
  }
  // Specify the border-box properties.
  @if $box-sizing == border-box {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -ms-box-sizing: border-box;
    box-sizing: border-box;
  }
  // Prevent borders since they'll break the layout with content-box.
  @if $box-sizing == content-box {
    border: 0 !important;
  }
  // Prevent overflowing content from breaking the layout.
  overflow: visible;
  word-wrap: break-word; // A very nice CSS3 property.

  @if ($legacy-support-for-ie6 or $legacy-support-for-ie7) and $box-sizing == border-box {
    @warn "IE legacy support is on, but $box-sizing is set to #{$box-sizing}.";
  }
  @else if $legacy-support-for-ie6 and $box-sizing == content-box {
    .ie6 & {
      display: inline; // display inline or double your floated margin! [1]
      overflow: hidden; // in IE6, overflow auto is broken [2] and so is overflow visible [3]
      overflow-y: visible;
    }
  }
}

//
// Apply this to content boxes that need to be cleared below other content boxes.
//
@mixin zen-clear (
  $float-direction: $zen-float-direction,
  $reverse-all-floats: $zen-reverse-all-floats
) {
  // Determine the float direction.
  $dir: $float-direction;
  @if $reverse-all-floats {
    $dir: zen-direction-flip($dir);
  }
  clear: $dir;
}

//
// Apply this to an HTML item that is in the normal flow of a document to help
// align it to the grid. Set the $column-span to the number of columns that the
// HTML element should span. Set the $column-count to the number of columns that
// the parent element spans.
//
// Unlike the zen-grid-item() mixin, this mixin does not float the HTML item. To
// help position the item to align flush with the left edge of a containing grid
// item, you can set the $alpha-margin to true. To help position the item to
// align to align flush with the right edge of a containing grid item, you can
// set the $omega-margin to true.
//
@mixin zen-grid-html-item (
  $column-span,
  $column-count: $zen-column-count,
  $alpha-margin: false,
  $omega-margin: false,
  $gutter-width: $zen-gutter-width,
  $grid-width: $zen-grid-width,
  $box-sizing: $zen-box-sizing,
  $auto-include-html-item-base: $zen-auto-include-html-item-base
) {

  $dir: $zen-float-direction;
  @if $zen-reverse-all-floats {
    $dir: zen-direction-flip($dir);
  }
  $rev: zen-direction-flip($dir);
  @if $alpha-margin {
    margin-#{$dir}: -1 * zen-half-gutter($gutter-width);
  }
  @if $omega-margin {
    margin-#{$rev}: -1 * zen-half-gutter($gutter-width);
  }

  // Calculate the unit width.
  $unit-width: $grid-width / $column-count;
  width: $column-span * $unit-width;

  // Auto-apply the unit base mixin.
  @if $auto-include-html-item-base {
    @include zen-grid-item-base($gutter-width, $box-sizing);
  }
}


//
// Helper functions for the Zen mixins.
//

// Returns the opposite direction, given "left" or "right".
@function zen-direction-flip($dir) {
  @if $dir == left {
    @return right;
  }
  @return left;
}

// Returns a half gutter width.
@function zen-half-gutter($gutter-width: $zen-gutter-width) {
  // @todo Handle odd-pixel-sized gutters.
  @return $gutter-width / 2;
}
