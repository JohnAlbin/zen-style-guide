//
// Mixins for Zen Columns layout method.
//

$legacy-support-for-ie6: false !default;


@mixin zen-columns-fixed (
  // Information about the columns.
  $selectors: ('.sidebar1', '.content', '.sidebar2'),
  $widths: (),
  $leading-direction: (),
  $leading-gutters: (),
  $padding: (),

  // Information about the navbar.
  $navbar-selector: false,
  $navbar-height: 0,
  $navbar-width: 100%,
  $navbar-leading-gutter: 0,
  $navbar-padding: 0
) {

  // Allow some parameters to be simple strings instead of lists.
  @if type_of($widths) != list {
    $widths: ($widths);
  }
  @if type_of($leading-direction) != list {
    $leading-direction: ($leading-direction);
  }
  @if type_of($leading-gutters) != list {
    $leading-gutters: ($leading-gutters);
  }
  @if type_of($padding) != list {
    $padding: ($padding);
  }
  @if type_of($navbar-padding) != list {
    $navbar-padding: ($navbar-padding);
  }

  // Declare all our variables so they can be used in any child block scope.
  $col: 0;
  $float: left;
  @if length($leading-direction) > 0 {
    $float: nth($leading-direction, 1);
  }
  $gutter: 0;
  $left-fill: 0;
  $left-reset: 0;
  $right-fill: 0;
  $right-reset: 0;
  $margin: 0;
  $padding-values: 0;
  $padding-x: 0;
  $navbar-padding-x: 0;
  $navbar-padding-y: 0;
  $navbar-reset: 0;
  $navbar-true-height: 0;
  $container-children: $selectors;

  @if $navbar-selector {
    // Determine the padding height and width of the navbar.
    $navbar-padding-x: 2 * nth($navbar-padding, 1);
    $navbar-padding-y: 2 * nth($navbar-padding, 1);
    @if length($navbar-padding) == 4 {
      $navbar-padding-x: nth($navbar-padding, 2) + nth($navbar-padding, 4);
    }
    @else if length($navbar-padding) >= 2 {
      $navbar-padding-x: 2 * nth($navbar-padding, 2);
    }
    @if length($navbar-padding) >= 3 {
      $navbar-padding-y: nth($navbar-padding, 1) + nth($navbar-padding, 3);
    }
    // Determine the distance of the navbar's right edge from the container's left edge.
    $navbar-reset: -$navbar-leading-gutter - $navbar-width - $navbar-padding-x;
    // The columns need to know the true height of the navbar box.
    $navbar-true-height: $navbar-height + $navbar-padding-y;
    // Add the navbar to the list of the selectors of the container's children.
    $container-children: join($container-children, ($navbar-selector));
  }

  // Iterate over each column.
  @each $column in $selectors {
    // Number the columns.
    $col: $col + 1;
    // Find the width, floating direction and gutter of the current column.
    $width: nth($widths, $col);
    @if $col <= length($leading-direction) {
      $float: nth($leading-direction, $col);
    }
    @if $col <= length($leading-gutters) {
      $gutter: nth($leading-gutters, $col);
    }
    // Calculate the left/right padding as it affects the true width of the column.
    @if $col <= length($padding) {
      $padding-values: nth($padding, $col);
      @if type_of($padding-values) != list {
        $padding-values: ($padding-values);
      }
      $padding-x: 2 * nth($padding-values, 1);
      @if length($padding-values) == 4 {
        $padding-x: nth($padding-values, 2) + nth($padding-values, 4);
      }
      @else if length($padding-values) > 1 {
        $padding-x: 2 * nth($padding-values, 2);
      }
    }
    // If the column is floating from the left, determine the distance from the
    // container's left edge to the column's left edge ($left-fill) and to the
    // column's right edge ($left-reset).
    @if $float == left {
      $left-fill: $left-fill + $gutter;
      $left-reset: -$left-fill - $padding-x - $width;
      $margin: $navbar-true-height $left-reset 0 $left-fill;
      // The next column needs to know how much the previous columns have filled.
      $left-fill: $left-fill + $width + $padding-x;
    }
    // If the column is floating from the right, determine the distance from the
    // container's right edge to the column's right edge ($right-fill) and to
    // the column's left edge ($right-reset).
    @else {
      $right-fill: $right-fill + $gutter;
      $right-reset: -$right-fill - $padding-x - $width;
      $margin: $navbar-true-height $right-fill 0 $right-reset;
      // The next column needs to know how much the previous columns have filled.
      $right-fill: $right-fill + $width + $padding-x;
    }

    // Apply rules to the columns.
    #{$column} {
      float: $float;
      width: $width;
      margin: $margin;
      padding: $padding-values;
    }
  }

  // Apply rules to the container.
  position: relative;
  @if $legacy-support-for-ie6 {
    _zoom: 1; // Otherwise with a liquid layout, sidebars disappear when resizing the windows in IE6.
  }

  // Apply rules to the navbar.
  @if $navbar-selector {
    #{$navbar-selector} {
      float: $float;
      height: $navbar-height;
      margin: 0 $navbar-reset 0 $navbar-leading-gutter;
      width: $navbar-width;
      padding: $navbar-padding;
    }
  }

  // Prevent overflowing content from breaking the layout.
  #{$container-children} {
    overflow: visible;
    word-wrap: break-word; // A very nice CSS3 property.

    @if $legacy-support-for-ie6 {
      _display: inline; // display inline or double your floated margin! [1]
      _overflow: hidden; // in IE6, overflow auto is broken [2] and so is overflow visible [3]
      _overflow-y: visible;
    }
  }
}

// REFERENCES
//
// 1. http://www.positioniseverything.net/explorer/doubled-margin.html
// 2. http://browservulsel.blogspot.com/2005/04/ie-overflow-auto-scrollbar-overlap.html
// 3. http://www.howtocreate.co.uk/wrongWithIE/?chapter=overflow%3Avisible%3B
